** Lesson1 **


diff -u for unix readable diff
fc for windows
git bash on windows provides unix commands

git log gives list of commits with summary/author and commit id

git diff commitid_old commit_new [remember old comes first]
git diff f19cb1b80fe27e938e4d72770ca0a42f25e99ecc b0678b161fcf74467ed3a63110557e3d6229cfa6 --stat 
To stop viewing git log output, press q (which stands for quit).


To get colored diff output, run git config --global color.ui auto


git show commit_id 
or
git show commit_id --stat (also shows differnce of commit)

git log --stat also gives list of changed file plus indicator of size of changes

To clone a repository do
git clone url [example url https://github.com/udacity/asteroids.git]

git checkout commit id

   [you need to have the commit id of head to come back]
----------
** Lesson2 **

.git in each directory has metadata for repository

to make a new repo
create a new directory with files as necessary

git init makes new repo
It doesn't create any commits.

If you run git log 
you get the message
fatal: bad default revision 'HEAD'


git status [status of repository]
it willl say Initial Status untracked files ...
On branch master

Initial commit

Untracked files:
  (use "git add <file>..." to include in what will be committed)

  LemonSadam.txt
  Sambhar.txt
  ThengaiSadam.txt

nothing added to commit but untracked files present (use "git add" to track)

--
working directory --> staging area ---> repository

Specifying files to be tracked via git add moves them to staging area
then commit moves it to repository.

after doing git add ThengaiSadam.txt
git add LemonSadam.txt
 and running git status
On branch master

Initial commit

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

  new file:   LemonSadam.txt
  new file:   ThengaiSadam.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

  Sambhar.txt

git commit opens editor
Enter commit message
git practice is to use message like a command
Use "Add a method" instead of "Added ..."


---------------
When you make a change after commit, the staging area has an exact copy of repository after commit.
And your changes are in the working directory

if you do git diff, it compares working directory to staging area
if you do git diff --staged, it compares staging area to repository

you need to git add file to move the edited file to staging area
and then do git commit to make a commit

git reset --hard  
does a revert of all changes in staging area and working directory

Branches 
Allows you do parallel edits
label for a commit
You can have multiple label for commits

 By default, you are in master branch
if you do git branch, it tells you which branch you are on
git checkout branch checksout a branch
Making a commit automatically updates the branch to the latest commit
git branch 
you are in master
git branch easy-mode  [ makes easy-mode branch]
branch* (it is currently checked out branch and edoits will be on branch)
easy-mode
git checkout easy-mode [now you are in easy mode]
branch
easy-mode* 
-------
Concept of reachability
Each commit has its parents information
Each branch now which commit it is on
head is the name of current commit
to see reachability

 git log --graph --oneline branch1 branch2 branch3

git checkout -b branch_name is equivalent to git branch branch_name followed by git checkout branch_name

If you go back to a previous commit (and head is detached) and you make a new commit there, it can be lost unless you make a new branch.
This commit will not affect any other commits there.
----
git merge branch1 branch2

Note that it will always merge the current branch.
So make sure that you checkout into one of the branches
If merge does not work,
git merge --abort

Also after merge, it will show commits in both parents timeline sorted by timestamp

So, git diff oldcommitid newcommitid will not work if oldcommitid is not ancestor of newcommitid
Instead do
git show commitid
-------
Merge conflict (Newline characters between Windows and Unix systems)
Context: Whenever we hit the "Enter" key on the keyboard, we are actually telling the computer to insert an invisible character into our text file to indicate to the computer that there should be a new line. Unix systems adds one character called the "line feed" character or LF or \n while Windows systems adds two characters, "carriage return" and "line feed" or CRLF or \r\n.
Caroline's files have LF because her files were edited on Mac OSX, which uses LF. If a Windows user were to edit Caroline's files, the Windows text editor might convert all LF to CRLF to make editing files possible. When the Windows user merges her file with Caroline's files, a merge conflict will result due to the different LF and CRLF characters.
To fix this, Windows users should set the global autocrlf attribute to true: git config --global core.autocrlf true. More information can be found here: https://help.github.com/articles/dealing-with-line-endings/#platform-all

-------
When there are conflicts in merge,
you can edit file to resolve conflict
doing git status will say both modifed
do git add and then git commit
-------
